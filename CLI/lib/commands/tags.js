import { repoFind } from "../repository.js";
import { refList, refCreate } from "../references.js";
import { objectWrite, objectRead, GitTag } from "../objects.js";
import { kvlmSerialize } from "../commits.js";

// Create or list tags
export function cmdTag(args) {
    const repo = repoFind();

    if (args.name) {
        tagCreate(
            repo,
            args.name,
            args.object || "HEAD",
            args.createTagObject
        );
    } else {
        const refs = refList(repo);
        if (refs.tags) {
            showTags(refs.tags);
        } else {
            console.log("No tags found.");
        }
    }
}

// Create a tag
function tagCreate(repo, name, ref, createTagObject = false) {
    const sha = objectFind(repo, ref);

    if (createTagObject) {
        // Create a tag object
        const tag = new GitTag();
        tag.kvlm.set("object", sha);
        tag.kvlm.set("type", "commit"); // Assuming tag points to a commit
        tag.kvlm.set("tag", name);
        tag.kvlm.set(
            "tagger",
            "YourName <you@example.com> " + Math.floor(Date.now() / 1000)
        );
        tag.kvlm.set(
            null,
            "A tag generated by your CLI. Customize this message!"
        );

        const tagSha = objectWrite(tag, repo);
        refCreate(repo, `tags/${name}`, tagSha);
    } else {
        // Create a lightweight tag (reference)
        refCreate(repo, `tags/${name}`, sha);
    }
}

// Show tags recursively
function showTags(tags) {
    for (const [key, value] of Object.entries(tags)) {
        if (typeof value === "string") {
            console.log(key);
        } else {
            showTags(value);
        }
    }
}

// Resolve object references (placeholder for now)
function objectFind(repo, ref) {
    // For now, assume ref is a full SHA
    return ref;
}
